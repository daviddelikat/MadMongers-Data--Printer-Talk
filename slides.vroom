# This is a sample Vroom input file. It should help you get started.
#
# Edit this file with your content. Then run `vroom --vroom` to start
# the show!
#
# See `perldoc Vroom` for complete details.
#
---- config
# Basic config options.
title: Data::Printer
vim: mvim
indent: 10
height: 22
width: 80
auto_size: 1
skip: 0

# The following options are for Gvim usage.
# vim: gvim
# gvimrc: |
#   set fuopt=maxhorz,maxvert
#   set guioptions=egmLtT
#   set guifont=Bitstream_Vera_Sans_Mono:h18
#   set guicursor=a:blinkon0-ver25-Cursor
#   colorscheme default

---- center
== Data::Printer

by Breno G. de Oliveira



----
== Human Readable Data Dumper

+* One Way Conversion
+    * Not computer readable
+    * Not comprehensive rendering
+    * Not a full replacement for
+        * JSON
+        * YAML
+        * Data::Dumper...
----
== Human Readable Data Dumper

+* Excellent Default Settings
+    * Scalar, Array, Hash
+         All display in clear format
+    * Blessed Refs
+         Display Class, Methods, Contents
----
== Human Readable Data Dumper

+* Customizable
+    * Everything...
+    * Really.
+* Expandable
+    * Filters
+    * Plugins
+* Pretty Colors

----
== Getting Started

* cpanm -S Data::Printer...
+* use Data::Printer
+    * use DDP;
+* p <var>;
+* Prototypes
+    * p $scalar; p %hash; p @array;
+* One Item at a Time

---- perl,i4
== #Examples

use DDP;
my @a = qw/one two three four/;
my %h = (
   hey => 'you',
   dont => 'still water',
   cant => 'have pudding',
);
p @a;  p %h;
---- perl,i4
== #Examples

use JSON;
use DDP;
my $j = JSON->new;
p $j;

---- perl, i4
== #Overcoming Obstacles

+# Somebody plugged this module full
      # of 'Dumper' calls...
+     # yuck
+  #use Data::Dumper; <<< comment this out
+  use DDP alias => 'Dumper';   # add this...
    # problem solved...
+# .. oh, don't forget 'p' only
      # takes one parameter
+    my $hash = { joe => 'vs Volcano', sleepless => 'Seatle' };
    print Dumper $hash;
---- perl

		 # colors?

    my $hash = { bob => 'what about him?', ground => 'hog' };
    use DDP;print p($hash,colored=>1);

---- perl
                   # OR:

    use DDP colored => 1 ;
    my $hash = { bob => 'what about him?', ground => 'hog' };
    print hello => p $hash;

----
== Getting Fancy
----
== Getting Fancy: Three Modes

+ * dump
+   * default
    * void context prints the data
    * other context returns the data in a string
+      handy for extended log messages:
   $self->log->message('failed to stump fribbler:',p($self),
        ' while trying to bumble:',p(@args));
+ * void
    * always print and return void
+      I'm sure someone has a use for this...
+ * pass
    * always print; return the original value
+   My favorite mode...

----
== Function Calls

doTheRightThing( $parameter );

----
== Function Calls

use DDP return_value => 'pass';

doTheRightThing( p $parameter );

----
== Method Sequence

$can->open->warm(200,600)->eat;

----
== Method Sequence

package Can::Of::Beans;

use DDP return_value => 'pass';

+ $can->p->open->p->warm(200,600)->p->eat->p;

----

      OR:

use DDP return_value => 'pass', colored => 1;  # in the main module...

$can->DDP::p->open->DDP::p->warm(200,600)->DDP::p->eat->DDP::p;

----
== #Example

use DDP return_value => 'pass', colored => 1;

package TIM;
sub new { bless [ ], shift }
sub junk { $_[0][1] = 'junk'; $_[0] }
sub sam { $_[0][2] = 'sam'; $_[0] }
sub oye { $_[0][0] = 'oye'; $_[0] }

package main;
TIM->new->DDP::p->junk->DDP::p->sam->DDP::p->oye->DDP::p;

----
== Even Fancier
----
== Even Fancier: Redirect Output

* Default target is STDOUT
    output => 'stdout'
+* Output to any File Handle
    output => 'stderr'
    output => *STDERR
    output => $my_fh
+* Use a Filename
    output => $filename
+* Scalar Ref...
    output => \$scalar
----
== Highly Customizable

+* Custom Colors
+    * By Type ( HASH, ARRAY, SCALAR, ... )
+    * By Feature  ( Weak ref, Tainted, ... )
+* Personal Config File
+* Caller Info
+    * One Level Stack Trace
+    * Custom Message
+          With Placeholders

----
== Highly Customizable ( part deux )

+* Filters
+     'DateTime'      => sub { $_[0]->ymd },
+     'HTTP::Request' => sub { $_[0]->uri },
+   Data::Printer::Filters
+      existing filters for DBI
        -external => [ 'DB' ],
     autoformat db handles and statements
+                               & DateTime
        -external => [ 'DateTime' ],
    autoformat 8 date related classes

----
== Well Connected

* Plugins for Other Modules
+  DB::Pluggable
+  Any::Renderer
+  Devel::REPL

----

CPAN:

http://search.cpan.org/~garu/Data-Printer-0.3/lib/Data/Printer.pm

Slide-show:

git://github.com/daviddelikat/MadMongers-Data--Printer-Talk.git

----
== The End
